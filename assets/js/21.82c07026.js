(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{440:function(r,e,o){r.exports=o.p+"assets/img/1.dcd16714.jpg"},441:function(r,e,o){r.exports=o.p+"assets/img/architecture.b595b80b.svg"},442:function(r,e,o){r.exports=o.p+"assets/img/flow.1c299101.png"},629:function(r,e,o){"use strict";o.r(e);var t=o(2),c=Object(t.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"_01-docker概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_01-docker概述"}},[r._v("#")]),r._v(" 01-Docker概述")]),r._v(" "),e("h2",{attrs:{id:"docker简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker简介"}},[r._v("#")]),r._v(" Docker简介")]),r._v(" "),e("p",[r._v("Docker是基于Go语言实现的云开源项目。")]),r._v(" "),e("p",[r._v("Docker的主要目标是：Build, Ship and Run Any App, Anywhere，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP及其运行环境能做到"),e("code",[r._v("一次镜像,处处运行")]),r._v("。")]),r._v(" "),e("h2",{attrs:{id:"传统虚拟机和容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传统虚拟机和容器"}},[r._v("#")]),r._v(" 传统虚拟机和容器")]),r._v(" "),e("p",[r._v("传统虚拟机（virtual machine）：\n传统虚拟机技术基于安装在主操作系统上的虚拟机管理系统（如VirtualBox、VMware等），创建虚拟机（虚拟出各种硬件），在虚拟机上安装从操作系统，在从操作系统中安装部署各种应用。\n缺点：资源占用多、冗余步骤多、启动慢")]),r._v(" "),e("p",[r._v("Linux容器（Linux Container，简称LXC）：\nLinux容器是与系统其他部分分隔开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。")]),r._v(" "),e("p",[r._v("Linux容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一的运行。")]),r._v(" "),e("img",{attrs:{src:o(440)}}),r._v(" "),e("h2",{attrs:{id:"docker运行速度快的原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker运行速度快的原因"}},[r._v("#")]),r._v(" Docker运行速度快的原因")]),r._v(" "),e("p",[r._v("Docker有比虚拟机更少的抽象层：\n由于Docker不需要Hypervisor（虚拟机）实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的都是实际物理机的硬件资源，因此在CPU、内存利用率上docker有明显优势。")]),r._v(" "),e("p",[r._v("Docker利用的是宿主机的内核，而不需要加载操作系统OS内核：\n当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较耗时耗资源的过程。当新建一个虚拟机时，虚拟机软件需要加载OS，返回新建过程是分钟级别的。而Docker由于直接利用宿主机的操作系统，则省略了返回过程，因此新建一个docker容器只需要几秒钟。")]),r._v(" "),e("p",[r._v("Docker容器的本质就是一个进程。")]),r._v(" "),e("h2",{attrs:{id:"docker软件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker软件"}},[r._v("#")]),r._v(" Docker软件")]),r._v(" "),e("p",[r._v("Docker并非一个通用的容器工具，它依赖于已经存在并运行的Linux内核环境。（在Windows上安装Docker时需要依赖WLS，也即Windows下的Linux子系统）。")]),r._v(" "),e("p",[r._v("Docker实质上是在已经运行的Linux下制造了一个隔离的文件环境，因此它执行的效率几乎等同于所部署的Linux主机。")]),r._v(" "),e("p",[r._v("Docker的基本组成部分：")]),r._v(" "),e("ul",[e("li",[e("p",[r._v("镜像（image）")])]),r._v(" "),e("li",[e("p",[r._v("容器（container）")])]),r._v(" "),e("li",[e("p",[r._v("仓库（repository）")])])]),r._v(" "),e("h2",{attrs:{id:"docker镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像"}},[r._v("#")]),r._v(" Docker镜像")]),r._v(" "),e("p",[r._v("Docker镜像就是一个只读的模板。镜像可以用来创建Docker容器，一个镜像可以创建多个容器。")]),r._v(" "),e("h2",{attrs:{id:"docker容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker容器"}},[r._v("#")]),r._v(" Docker容器")]),r._v(" "),e("p",[r._v("Docker利用容器独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器是用镜像创建的运行实例。")]),r._v(" "),e("h2",{attrs:{id:"docker仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker仓库"}},[r._v("#")]),r._v(" Docker仓库")]),r._v(" "),e("p",[r._v("Docker仓库是集中存放镜像文件的场所。")]),r._v(" "),e("p",[r._v("仓库分为公开仓库和私有仓库两种。")]),r._v(" "),e("p",[r._v("最大的公开仓库是Docker官方的Docker Hub：https://hub.docker.com/")]),r._v(" "),e("h2",{attrs:{id:"docker架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker架构"}},[r._v("#")]),r._v(" Docker架构")]),r._v(" "),e("img",{attrs:{src:o(441)}}),r._v("\nDocker运行的基本流程为：\n"),e("ol",[e("li",[e("p",[r._v("用户是使用Docker Client 与 Docker Daemon 建立通信，并发送请求给后者")])]),r._v(" "),e("li",[e("p",[r._v("Docker Daemon 作为 Docker 架构的主体部分，首先提供 Docker Server 的功能使其可以接收 Docker Client 的请求")])]),r._v(" "),e("li",[e("p",[r._v("Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式存在")])]),r._v(" "),e("li",[e("p",[r._v("Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph Driver 将下载镜像以 Graph 的形式存储")])]),r._v(" "),e("li",[e("p",[r._v("当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境")])]),r._v(" "),e("li",[e("p",[r._v("当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Exec driver 来完成")])]),r._v(" "),e("li",[e("p",[r._v("Libcontainer 是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过 Libcontainer 来实现具体对容器进行的操作")])])]),r._v(" "),e("img",{attrs:{src:o(442)}})])}),[],!1,null,null,null);e.default=c.exports}}]);